
Given an array arr[] and an integer k where k is smaller than the size of the array, the task is to find the kth smallest element in the given array.

Follow up: Don't solve it using the inbuilt sort function.

Examples :

Input: arr[] = [7, 10, 4, 3, 20, 15], k = 3
Output:  7
Explanation: 3rd smallest element in the given array is 7

1.  //kth smallest element bruteforce

class Solution {
  public:
    // arr : given array
    // k : find kth smallest element and return using this function
    int kthSmallest(vector<int> &arr, int k) {
        // code here
        int result_id;
        int small = arr[0];
        int n = arr.size(),result,num=100000;
        while(k>0)
        {
            small=arr[0];
            for(int i=0;i<n;i++)
            {
                if(arr[i]<=small)
                {
                    small = arr[i];
                    result_id = i;
                }
            }
            k--;
            arr[result_id]=num;
           
            num++;
            
        }
        return small;
    }
};
2.Now solve this using optimized approach that is quick search algorithm finding 6th smallest
Example
4,5,10,11,1,3,19,8,7
1 2  3  4 5 6 7  8 9
low                high
pi                   pivot
//check lowelement is less than pivotelement if yes swap(lowelement,pi) , pi(pivotindex)++ , and low++ 
if lowelement is not less than pivotelement low++ pi++
when pivot is at kth position return it
//working of example
4,5,10,11,1,3,19,8,7
4,5,10,11,1,3,19,8,7
    pi    low
swap(low,pi)
4,5,1,11,10,3,19,8,7
      pi    low
swap(3,11)
4,5,1,3,10,11,19,8,7
        pi         low
swap(7,10)
4,5,1,3,7,11,19,8,10
return pi 

pi<k
then low = pi+1
high = n-1
11,19,8,10
 class Solution {
  public:
    // arr : given array
    // k : find kth smallest element and return using this function
    int Findpivotindex(vector<int>&arr,int low,int high)
    {
        int pivot = arr[high];
        int i = low;
        for(int j = low;j<high;j++)
        {
            if(arr[j]<pivot)
            {
                
                swap(arr[i],arr[j]);
                i++;
           
            }
        }
        swap(arr[high],arr[i]);
        return i;
    }
    
    
    
    int quickselect(vector<int>&arr,int low,int high,int k)
    {
    if(low<=high)
    {
    int pivotindex = Findpivotindex(arr,low,high);
    if(pivotindex == k-1)return arr[pivotindex];
    if(pivotindex < k-1) return quickselect(arr,pivotindex+1,high,k);
    if(pivotindex > k-1) return quickselect(arr,low,pivotindex-1,k);
    }
    return arr[low];
    }
     
    int kthSmallest(vector<int> &arr, int k) {
        // code here
        int n = arr.size();
        int result = quickselect(arr,0,n-1,k);
        return result;
    }
};        




